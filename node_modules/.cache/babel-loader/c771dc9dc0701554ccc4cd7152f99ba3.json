{"ast":null,"code":"import { pieceDarker, squareColorDarker, squareSelected, checkEatingDark } from './index';\nconst eatNormalPiece = 1;\nconst eatQueenPiece = 1.5;\nconst movePiece = 0;\nconst diePiece = -1;\nconst dieQueenPiece = -1.5; // voce pode comer uma peça?\n// voce vai morrer?\n// se não vai andar normal\n// array [{id: 1, soma: 0}, {id: 2, soma: 1.5}]\n\nfunction getSquareInfo({\n  board,\n  square\n}) {\n  let indexSquare = null;\n  board.forEach(row => row.forEach(sq => {\n    if (sq && sq.id && sq.id === square.id) {\n      indexSquare = {\n        row: board.indexOf(row),\n        index: row.indexOf(sq),\n        piece: sq.piece,\n        id: sq.id\n      };\n    }\n  }));\n  return indexSquare;\n}\n\nfunction copyBoard({\n  board\n}) {\n  const newBoard = JSON.parse(JSON.stringify(board)).map(row => {\n    return row.map(sq => {\n      if (sq.color === squareSelected) {\n        sq.color = squareColorDarker;\n      }\n\n      return sq;\n    });\n  });\n  return newBoard;\n}\n\nfunction showMovementDark({\n  board,\n  squareInfo\n}) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 9) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const right = board[squareInfo.row + 1][squareInfo.index - 1];\n\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return board;\n    }\n\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingDark({\n        board,\n        square: right,\n        direction: 'right'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextRight = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n        nextRight.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  } // se for 0 só pode mover pra direita\n\n\n  if (squareInfo.index === 0) {\n    const left = board[squareInfo.row + 1][squareInfo.index + 1];\n\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return board;\n    }\n\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingDark({\n        board,\n        square: left,\n        direction: 'left'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextleft = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n        nextleft.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  } // pode mover para os dois lados\n\n\n  const verify = {\n    left: true,\n    right: true\n  }; // left\n\n  const right = board[squareInfo.row + 1][squareInfo.index - 1];\n\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingDark({\n      board,\n      square: right,\n      direction: 'right'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextright = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n      nextright.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.right = false;\n    }\n  } // right\n\n\n  const left = board[squareInfo.row + 1][squareInfo.index + 1];\n\n  if (left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n\n  if (left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingDark({\n      board,\n      square: left,\n      direction: 'left'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextRight = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.left = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction checkBestOption({\n  board,\n  square\n}) {}\n\nexport function handleAlphaBeta({\n  board\n}) {\n  board.forEach(row => row.forEach(square => {\n    if (square && square.id && square.piece && square.piece.color && square.piece.color === pieceDarker) {\n      return;\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/logic/ia.js"],"names":["pieceDarker","squareColorDarker","squareSelected","checkEatingDark","eatNormalPiece","eatQueenPiece","movePiece","diePiece","dieQueenPiece","getSquareInfo","board","square","indexSquare","forEach","row","sq","id","indexOf","index","piece","copyBoard","newBoard","JSON","parse","stringify","map","color","showMovementDark","squareInfo","right","direction","nextRight","left","nextleft","verify","nextright","checkBestOption","handleAlphaBeta"],"mappings":"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","sourcesContent":["import {\n  pieceDarker,\n  squareColorDarker,\n  squareSelected,\n  checkEatingDark,\n} from './index';\nconst eatNormalPiece = 1;\nconst eatQueenPiece = 1.5;\nconst movePiece = 0;\nconst diePiece = -1;\nconst dieQueenPiece = -1.5;\n\n// voce pode comer uma peça?\n// voce vai morrer?\n// se não vai andar normal\n\n// array [{id: 1, soma: 0}, {id: 2, soma: 1.5}]\n\nfunction getSquareInfo({ board, square }) {\n  let indexSquare = null;\n\n  board.forEach((row) =>\n    row.forEach((sq) => {\n      if (sq && sq.id && sq.id === square.id) {\n        indexSquare = {\n          row: board.indexOf(row),\n          index: row.indexOf(sq),\n          piece: sq.piece,\n          id: sq.id,\n        };\n      }\n    })\n  );\n\n  return indexSquare;\n}\n\nfunction copyBoard({ board }) {\n  const newBoard = JSON.parse(JSON.stringify(board)).map((row) => {\n    return row.map((sq) => {\n      if (sq.color === squareSelected) {\n        sq.color = squareColorDarker;\n      }\n      return sq;\n    });\n  });\n  return newBoard;\n}\n\nfunction showMovementDark({ board, squareInfo }) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n\n  if (squareInfo.row === 9) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const right = board[squareInfo.row + 1][squareInfo.index - 1];\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return board;\n    }\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingDark({ board, square: right, direction: 'right' })) {\n        const newBoard = copyBoard({ board });\n        const nextRight = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n        nextRight.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  }\n  // se for 0 só pode mover pra direita\n  if (squareInfo.index === 0) {\n    const left = board[squareInfo.row + 1][squareInfo.index + 1];\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return board;\n    }\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingDark({ board, square: left, direction: 'left' })) {\n        const newBoard = copyBoard({ board });\n        const nextleft = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n        nextleft.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  }\n  // pode mover para os dois lados\n  const verify = { left: true, right: true };\n\n  // left\n  const right = board[squareInfo.row + 1][squareInfo.index - 1];\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingDark({ board, square: right, direction: 'right' })) {\n      const newBoard = copyBoard({ board });\n      const nextright = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n      nextright.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.right = false;\n    }\n  }\n\n  // right\n  const left = board[squareInfo.row + 1][squareInfo.index + 1];\n  if (left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n  if (left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingDark({ board, square: left, direction: 'left' })) {\n      const newBoard = copyBoard({ board });\n      const nextRight = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.left = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction checkBestOption({ board, square }) {}\n\nexport function handleAlphaBeta({ board }) {\n  board.forEach((row) =>\n    row.forEach((square) => {\n      if (\n        square &&\n        square.id &&\n        square.piece &&\n        square.piece.color &&\n        square.piece.color === pieceDarker\n      ) {\n        return;\n      }\n    })\n  );\n}\n"]},"metadata":{},"sourceType":"module"}