{"ast":null,"code":"import { darken } from 'polished';\nconst squareColorLighter = 'rgb(212,198,159)';\nexport const squareColorDarker = 'rgb(142,108,80)';\nexport const pieceDarker = 'rgb(82,57,47)';\nconst pieceLighter = 'rgb(230,183,79)';\nexport const squareSelected = darken(0.2, squareColorDarker);\n\nfunction piece({\n  color,\n  queen = false,\n  enable = true\n}) {\n  return {\n    color: color === pieceDarker ? pieceDarker : pieceLighter,\n    queen,\n    enable\n  };\n}\n\nfunction square({\n  id,\n  piece,\n  color\n}) {\n  return {\n    id,\n    piece,\n    color: color === squareColorDarker ? squareColorDarker : squareColorLighter\n  };\n}\n\nexport const board = [[square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 1,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 2,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 3,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 4,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 5,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n})], [square({\n  id: 6,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 7,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 8,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 9,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 10,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n})], [square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 11,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 12,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 13,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 14,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 15,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n})], [square({\n  id: 16,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 17,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 18,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 19,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 20,\n  piece: piece({\n    color: pieceDarker\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n})], [square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 21,\n  piece: null,\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 22,\n  piece: null,\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 23,\n  piece: null,\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 24,\n  piece: null,\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 25,\n  piece: null,\n  color: squareColorDarker\n})], [square({\n  id: 26,\n  piece: null,\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 27,\n  piece: null,\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 28,\n  piece: null,\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 29,\n  piece: null,\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 30,\n  piece: null,\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n})], [square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 31,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 32,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 33,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 34,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 35,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n})], [square({\n  id: 36,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 37,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 38,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 39,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 40,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n})], [square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 41,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 42,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 43,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 44,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 45,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n})], [square({\n  id: 46,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 47,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 48,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 49,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n}), square({\n  id: 50,\n  piece: piece({\n    color: pieceLighter\n  }),\n  color: squareColorDarker\n}), square({\n  id: null,\n  piece: null,\n  color: squareColorLighter\n})]];\n\nfunction getSquareInfo({\n  board,\n  square\n}) {\n  let indexSquare = null;\n  board.forEach(row => row.forEach(sq => {\n    if (sq && sq.id && sq.id === square.id) {\n      indexSquare = {\n        row: board.indexOf(row),\n        index: row.indexOf(sq),\n        piece: sq.piece,\n        id: sq.id\n      };\n    }\n  }));\n  return indexSquare;\n}\n\nfunction copyBoard({\n  board\n}) {\n  const newBoard = JSON.parse(JSON.stringify(board)).map(row => {\n    return row.map(sq => {\n      if (sq.color === squareSelected) {\n        sq.color = squareColorDarker;\n      }\n\n      return sq;\n    });\n  });\n  return newBoard;\n} // mostra os movimentos possíveis da peça\n\n\nexport function showMovement({\n  board,\n  square\n}) {\n  const newBoard = copyBoard({\n    board\n  });\n  const squareInfo = getSquareInfo({\n    board,\n    square\n  }); // se ele é rainha\n\n  if (square.piece.queen) {\n    return showMovementQueen({\n      squareInfo,\n      board: newBoard\n    });\n  } // se ele é branco\n\n\n  if (square.piece.color === pieceLighter) {\n    return showMovementLight({\n      squareInfo,\n      board: newBoard\n    });\n  } // se ele é preto\n\n\n  return showMovementDark({\n    squareInfo,\n    board: newBoard\n  });\n}\nexport function checkEatingLight({\n  board,\n  square,\n  direction\n}) {\n  const squareInfo = getSquareInfo({\n    board,\n    square\n  });\n\n  if (squareInfo.row - 1 === -1 || squareInfo.row + 1 === 10) {\n    return false;\n  }\n\n  if (direction === 'left') {\n    if (squareInfo.index === 0) {\n      return false;\n    }\n\n    if (!board[squareInfo.row - 1][squareInfo.index - 1].piece) {\n      return true;\n    }\n  } else {\n    if (squareInfo.index === 9) {\n      return false;\n    }\n\n    if (!board[squareInfo.row - 1][squareInfo.index + 1].piece) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function checkEatingDark({\n  board,\n  square,\n  direction\n}) {\n  const squareInfo = getSquareInfo({\n    board,\n    square\n  });\n\n  if (squareInfo.row - 1 === -1 || squareInfo.row + 1 === 10) {\n    return false;\n  }\n\n  if (direction === 'left') {\n    if (squareInfo.index === 9) {\n      return false;\n    }\n\n    if (!board[squareInfo.row + 1][squareInfo.index + 1].piece) {\n      return true;\n    }\n  } else {\n    if (squareInfo.index === 0) {\n      return false;\n    }\n\n    if (!board[squareInfo.row + 1][squareInfo.index - 1].piece) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function showMovementLight({\n  board,\n  squareInfo\n}) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 0) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const left = board[squareInfo.row - 1][squareInfo.index - 1];\n\n    if (left && left.piece && left.piece.color === pieceLighter) {\n      return board;\n    }\n\n    if (left && left.piece && left.piece.color !== pieceLighter) {\n      if (checkEatingLight({\n        board,\n        square: left,\n        direction: 'left'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n        nextLeft.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  } // se for 0 só pode mover pra direita\n\n\n  if (squareInfo.index === 0) {\n    const right = board[squareInfo.row - 1][squareInfo.index + 1];\n\n    if (right && right.piece && right.piece.color === pieceLighter) {\n      return board;\n    }\n\n    if (right && right.piece && right.piece.color !== pieceLighter) {\n      if (checkEatingLight({\n        board,\n        square: right,\n        direction: 'right'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n        nextRight.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  } // pode mover para os dois lados\n\n\n  const verify = {\n    left: true,\n    right: true\n  }; // left\n\n  const left = board[squareInfo.row - 1][squareInfo.index - 1];\n\n  if (left && left.piece && left.piece.color === pieceLighter) {\n    verify.left = false;\n  }\n\n  if (left && left.piece && left.piece.color !== pieceLighter) {\n    if (checkEatingLight({\n      board,\n      square: left,\n      direction: 'left'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n      nextLeft.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.left = false;\n    }\n  } // right\n\n\n  const right = board[squareInfo.row - 1][squareInfo.index + 1];\n\n  if (right && right.piece && right.piece.color === pieceLighter) {\n    verify.right = false;\n  }\n\n  if (right && right.piece && right.piece.color !== pieceLighter) {\n    if (checkEatingLight({\n      board,\n      square: right,\n      direction: 'right'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.right = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction showMovementLightQueen({\n  board,\n  squareInfo\n}) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 0) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const left = board[squareInfo.row - 1][squareInfo.index - 1];\n\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return board;\n    }\n\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingLight({\n        board,\n        square: left,\n        direction: 'left'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n        nextLeft.color = squareSelected;\n        return {\n          newBoard\n        };\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  } // se for 0 só pode mover pra direita\n\n\n  if (squareInfo.index === 0) {\n    const right = board[squareInfo.row - 1][squareInfo.index + 1];\n\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return board;\n    }\n\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingLight({\n        board,\n        square: right,\n        direction: 'right'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n        nextRight.color = squareSelected;\n        return {\n          newBoard\n        };\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  } // pode mover para os dois lados\n\n\n  const verify = {\n    left: true,\n    right: true\n  }; // left\n\n  const left = board[squareInfo.row - 1][squareInfo.index - 1];\n\n  if (left && left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n\n  if (left && left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingLight({\n      board,\n      square: left,\n      direction: 'left'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n      nextLeft.color = squareSelected;\n      return {\n        newBoard\n      };\n    } else {\n      verify.left = false;\n    }\n  } // right\n\n\n  const right = board[squareInfo.row - 1][squareInfo.index + 1];\n\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingLight({\n      board,\n      square: right,\n      direction: 'right'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return {\n        newBoard\n      };\n    } else {\n      verify.right = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction showMovementDark({\n  board,\n  squareInfo\n}) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 9) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const right = board[squareInfo.row + 1][squareInfo.index - 1];\n\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return board;\n    }\n\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingDark({\n        board,\n        square: right,\n        direction: 'right'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextRight = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n        nextRight.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  } // se for 0 só pode mover pra direita\n\n\n  if (squareInfo.index === 0) {\n    const left = board[squareInfo.row + 1][squareInfo.index + 1];\n\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return board;\n    }\n\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingDark({\n        board,\n        square: left,\n        direction: 'left'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextleft = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n        nextleft.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  } // pode mover para os dois lados\n\n\n  const verify = {\n    left: true,\n    right: true\n  }; // left\n\n  const right = board[squareInfo.row + 1][squareInfo.index - 1];\n\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingDark({\n      board,\n      square: right,\n      direction: 'right'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextright = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n      nextright.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.right = false;\n    }\n  } // right\n\n\n  const left = board[squareInfo.row + 1][squareInfo.index + 1];\n\n  if (left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n\n  if (left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingDark({\n      board,\n      square: left,\n      direction: 'left'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextRight = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.left = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction showMovementDarkQueen({\n  board,\n  squareInfo\n}) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 9) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const right = board[squareInfo.row + 1][squareInfo.index - 1];\n\n    if (right && right.piece && right.piece.color === pieceLighter) {\n      return board;\n    }\n\n    if (right && right.piece && right.piece.color !== pieceLighter) {\n      if (checkEatingDark({\n        board,\n        square: right,\n        direction: 'right'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextRight = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n        nextRight.color = squareSelected;\n        return {\n          newBoard\n        };\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  } // se for 0 só pode mover pra direita\n\n\n  if (squareInfo.index === 0) {\n    const left = board[squareInfo.row + 1][squareInfo.index + 1];\n\n    if (left && left.piece && left.piece.color === pieceLighter) {\n      return board;\n    }\n\n    if (left && left.piece && left.piece.color !== pieceLighter) {\n      if (checkEatingDark({\n        board,\n        square: left,\n        direction: 'left'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextleft = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n        nextleft.color = squareSelected;\n        return {\n          newBoard\n        };\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  } // pode mover para os dois lados\n\n\n  const verify = {\n    left: true,\n    right: true\n  }; // left\n\n  const right = board[squareInfo.row + 1][squareInfo.index - 1];\n\n  if (right && right.piece && right.piece.color === pieceLighter) {\n    verify.right = false;\n  }\n\n  if (right && right.piece && right.piece.color !== pieceLighter) {\n    if (checkEatingDark({\n      board,\n      square: right,\n      direction: 'right'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextright = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n      nextright.color = squareSelected;\n      return {\n        newBoard\n      };\n    } else {\n      verify.right = false;\n    }\n  } // right\n\n\n  const left = board[squareInfo.row + 1][squareInfo.index + 1];\n\n  if (left.piece && left.piece.color === pieceLighter) {\n    verify.left = false;\n  }\n\n  if (left.piece && left.piece.color !== pieceLighter) {\n    if (checkEatingDark({\n      board,\n      square: left,\n      direction: 'left'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextRight = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return {\n        newBoard\n      };\n    } else {\n      verify.left = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction showMovementQueen({\n  board,\n  squareInfo\n}) {\n  if (squareInfo.piece.color === pieceLighter) {\n    const boardDark = showMovementDarkQueen({\n      board,\n      squareInfo\n    });\n\n    if (!Array.isArray(boardDark)) {\n      return boardDark.newBoard;\n    }\n\n    return showMovementLight({\n      board: boardDark,\n      squareInfo\n    });\n  }\n\n  const boardLight = showMovementLightQueen({\n    board,\n    squareInfo\n  });\n\n  if (!Array.isArray(boardLight)) {\n    return boardLight.newBoard;\n  }\n\n  return showMovementDark({\n    board: boardLight,\n    squareInfo\n  });\n}\n\nfunction checkTestLightEat({\n  board,\n  square,\n  direction\n}) {\n  const squareInfo = getSquareInfo({\n    board,\n    square\n  });\n\n  if (squareInfo.row - 2 <= -1 || squareInfo.row + 2 >= 10) {\n    return false;\n  }\n\n  if (direction === 'left') {\n    if (squareInfo.index === 0 || squareInfo.index === 1) {\n      return false;\n    }\n\n    if (!board[squareInfo.row - 2][squareInfo.index - 2].piece) {\n      if (board[squareInfo.row - 1][squareInfo.index - 1].piece) {\n        return true;\n      }\n    }\n  } else {\n    if (squareInfo.index === 9 || squareInfo.index === 8) {\n      return false;\n    }\n\n    if (!board[squareInfo.row - 2][squareInfo.index + 2].piece) {\n      if (board[squareInfo.row - 1][squareInfo.index + 1].piece) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkTestDarkEat({\n  board,\n  square,\n  direction\n}) {\n  const squareInfo = getSquareInfo({\n    board,\n    square\n  });\n\n  if (squareInfo.row - 2 <= -1 || squareInfo.row + 2 >= 10) {\n    return false;\n  }\n\n  if (direction === 'left') {\n    if (squareInfo.index === 9) {\n      return false;\n    }\n\n    if (!board[squareInfo.row + 2][squareInfo.index + 2].piece) {\n      if (board[squareInfo.row + 1][squareInfo.index + 1].piece) {\n        return true;\n      }\n    }\n  } else {\n    if (squareInfo.index === 0) {\n      return false;\n    }\n\n    if (!board[squareInfo.row + 2][squareInfo.index - 2].piece) {\n      if (board[squareInfo.row + 1][squareInfo.index - 1].piece) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function movePiece({\n  board,\n  square,\n  selected\n}) {\n  if (square.color !== squareSelected) return;\n  const selectedInfo = getSquareInfo({\n    board,\n    square: selected\n  });\n  const squareInfo = getSquareInfo({\n    board,\n    square\n  });\n  const newBoard = copyBoard({\n    board\n  });\n  let eat = false; // add\n\n  newBoard[squareInfo.row][squareInfo.index].piece = selected.piece; // check if can be a queen\n\n  if (square && !square.piece) {\n    // white\n    if (squareInfo.row === 9) {\n      newBoard[squareInfo.row][squareInfo.index].piece.queen = true;\n    } // black\n\n\n    if (squareInfo.row === 0) {\n      newBoard[squareInfo.row][squareInfo.index].piece.queen = true;\n    }\n  } // remove\n\n\n  newBoard[selectedInfo.row][selectedInfo.index].piece = null; // branco\n\n  if (selectedInfo.row - squareInfo.row === 2) {\n    if (squareInfo.index > selectedInfo.index) {\n      //right\n      newBoard[selectedInfo.row - 1][selectedInfo.index + 1].piece = null;\n    } else {\n      //left\n      newBoard[selectedInfo.row - 1][selectedInfo.index - 1].piece = null;\n    }\n\n    if (checkTestLightEat({\n      board: newBoard,\n      square,\n      direction: 'right'\n    }) || checkTestLightEat({\n      board: newBoard,\n      square,\n      direction: 'left'\n    })) {\n      console.log('ele pode comer meu parceiro testLightEat');\n      eat = true;\n    } // se a peça for queen tente para o dark tbm\n\n\n    if (selected && selected.piece && selected.piece.queen && selected.piece.color === pieceLighter) {\n      if (checkTestDarkEat({\n        board: newBoard,\n        square,\n        direction: 'right'\n      }) || checkTestDarkEat({\n        board: newBoard,\n        square,\n        direction: 'left'\n      })) {\n        console.log('ele pode comer meu parceiro testDarkEat');\n        eat = true;\n      }\n    }\n  } // preta\n\n\n  if (squareInfo.row - selectedInfo.row === 2) {\n    if (selectedInfo.index > squareInfo.index) {\n      //right\n      newBoard[selectedInfo.row + 1][selectedInfo.index - 1].piece = null;\n    } else {\n      //left\n      newBoard[selectedInfo.row + 1][selectedInfo.index + 1].piece = null;\n    }\n  }\n\n  return {\n    newBoard,\n    eat\n  };\n}","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/logic/index.js"],"names":["darken","squareColorLighter","squareColorDarker","pieceDarker","pieceLighter","squareSelected","piece","color","queen","enable","square","id","board","getSquareInfo","indexSquare","forEach","row","sq","indexOf","index","copyBoard","newBoard","JSON","parse","stringify","map","showMovement","squareInfo","showMovementQueen","showMovementLight","showMovementDark","checkEatingLight","direction","checkEatingDark","left","nextLeft","right","nextRight","verify","showMovementLightQueen","nextleft","nextright","showMovementDarkQueen","boardDark","Array","isArray","boardLight","checkTestLightEat","checkTestDarkEat","movePiece","selected","selectedInfo","eat","console","log"],"mappings":"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","sourcesContent":["import { darken } from 'polished';\n\nconst squareColorLighter = 'rgb(212,198,159)';\nexport const squareColorDarker = 'rgb(142,108,80)';\n\nexport const pieceDarker = 'rgb(82,57,47)';\nconst pieceLighter = 'rgb(230,183,79)';\n\nexport const squareSelected = darken(0.2, squareColorDarker);\n\nfunction piece({ color, queen = false, enable = true }) {\n  return {\n    color: color === pieceDarker ? pieceDarker : pieceLighter,\n    queen,\n    enable,\n  };\n}\n\nfunction square({ id, piece, color }) {\n  return {\n    id,\n    piece,\n    color: color === squareColorDarker ? squareColorDarker : squareColorLighter,\n  };\n}\n\nexport const board = [\n  [\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 1,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 2,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 3,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 4,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 5,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n  ],\n  [\n    square({\n      id: 6,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 7,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 8,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 9,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 10,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n  ],\n  [\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 11,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 12,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 13,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 14,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 15,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n  ],\n  [\n    square({\n      id: 16,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 17,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 18,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 19,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 20,\n      piece: piece({ color: pieceDarker }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n  ],\n  [\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 21,\n      piece: null,\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 22,\n      piece: null,\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 23,\n      piece: null,\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 24,\n      piece: null,\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 25,\n      piece: null,\n      color: squareColorDarker,\n    }),\n  ],\n  [\n    square({\n      id: 26,\n      piece: null,\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 27,\n      piece: null,\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 28,\n      piece: null,\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 29,\n      piece: null,\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 30,\n      piece: null,\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n  ],\n  [\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 31,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 32,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 33,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 34,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 35,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n  ],\n  [\n    square({\n      id: 36,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 37,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 38,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 39,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 40,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n  ],\n  [\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 41,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 42,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 43,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 44,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 45,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n  ],\n  [\n    square({\n      id: 46,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 47,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 48,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 49,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n    square({\n      id: 50,\n      piece: piece({ color: pieceLighter }),\n      color: squareColorDarker,\n    }),\n    square({ id: null, piece: null, color: squareColorLighter }),\n  ],\n];\n\nfunction getSquareInfo({ board, square }) {\n  let indexSquare = null;\n\n  board.forEach((row) =>\n    row.forEach((sq) => {\n      if (sq && sq.id && sq.id === square.id) {\n        indexSquare = {\n          row: board.indexOf(row),\n          index: row.indexOf(sq),\n          piece: sq.piece,\n          id: sq.id,\n        };\n      }\n    })\n  );\n\n  return indexSquare;\n}\n\nfunction copyBoard({ board }) {\n  const newBoard = JSON.parse(JSON.stringify(board)).map((row) => {\n    return row.map((sq) => {\n      if (sq.color === squareSelected) {\n        sq.color = squareColorDarker;\n      }\n      return sq;\n    });\n  });\n  return newBoard;\n}\n\n// mostra os movimentos possíveis da peça\nexport function showMovement({ board, square }) {\n  const newBoard = copyBoard({ board });\n  const squareInfo = getSquareInfo({ board, square });\n\n  // se ele é rainha\n  if (square.piece.queen) {\n    return showMovementQueen({ squareInfo, board: newBoard });\n  }\n  // se ele é branco\n  if (square.piece.color === pieceLighter) {\n    return showMovementLight({ squareInfo, board: newBoard });\n  }\n\n  // se ele é preto\n  return showMovementDark({ squareInfo, board: newBoard });\n}\n\nexport function checkEatingLight({ board, square, direction }) {\n  const squareInfo = getSquareInfo({ board, square });\n  if (squareInfo.row - 1 === -1 || squareInfo.row + 1 === 10) {\n    return false;\n  }\n  if (direction === 'left') {\n    if (squareInfo.index === 0) {\n      return false;\n    }\n    if (!board[squareInfo.row - 1][squareInfo.index - 1].piece) {\n      return true;\n    }\n  } else {\n    if (squareInfo.index === 9) {\n      return false;\n    }\n    if (!board[squareInfo.row - 1][squareInfo.index + 1].piece) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function checkEatingDark({ board, square, direction }) {\n  const squareInfo = getSquareInfo({ board, square });\n  if (squareInfo.row - 1 === -1 || squareInfo.row + 1 === 10) {\n    return false;\n  }\n  if (direction === 'left') {\n    if (squareInfo.index === 9) {\n      return false;\n    }\n    if (!board[squareInfo.row + 1][squareInfo.index + 1].piece) {\n      return true;\n    }\n  } else {\n    if (squareInfo.index === 0) {\n      return false;\n    }\n    if (!board[squareInfo.row + 1][squareInfo.index - 1].piece) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function showMovementLight({ board, squareInfo }) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 0) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const left = board[squareInfo.row - 1][squareInfo.index - 1];\n    if (left && left.piece && left.piece.color === pieceLighter) {\n      return board;\n    }\n    if (left && left.piece && left.piece.color !== pieceLighter) {\n      if (checkEatingLight({ board, square: left, direction: 'left' })) {\n        const newBoard = copyBoard({ board });\n        const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n        nextLeft.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  }\n  // se for 0 só pode mover pra direita\n  if (squareInfo.index === 0) {\n    const right = board[squareInfo.row - 1][squareInfo.index + 1];\n    if (right && right.piece && right.piece.color === pieceLighter) {\n      return board;\n    }\n    if (right && right.piece && right.piece.color !== pieceLighter) {\n      if (checkEatingLight({ board, square: right, direction: 'right' })) {\n        const newBoard = copyBoard({ board });\n        const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n        nextRight.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  }\n  // pode mover para os dois lados\n  const verify = { left: true, right: true };\n\n  // left\n  const left = board[squareInfo.row - 1][squareInfo.index - 1];\n  if (left && left.piece && left.piece.color === pieceLighter) {\n    verify.left = false;\n  }\n  if (left && left.piece && left.piece.color !== pieceLighter) {\n    if (checkEatingLight({ board, square: left, direction: 'left' })) {\n      const newBoard = copyBoard({ board });\n      const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n      nextLeft.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.left = false;\n    }\n  }\n\n  // right\n  const right = board[squareInfo.row - 1][squareInfo.index + 1];\n  if (right && right.piece && right.piece.color === pieceLighter) {\n    verify.right = false;\n  }\n  if (right && right.piece && right.piece.color !== pieceLighter) {\n    if (checkEatingLight({ board, square: right, direction: 'right' })) {\n      const newBoard = copyBoard({ board });\n      const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.right = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction showMovementLightQueen({ board, squareInfo }) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 0) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const left = board[squareInfo.row - 1][squareInfo.index - 1];\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return board;\n    }\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingLight({ board, square: left, direction: 'left' })) {\n        const newBoard = copyBoard({ board });\n        const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n        nextLeft.color = squareSelected;\n        return { newBoard };\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  }\n  // se for 0 só pode mover pra direita\n  if (squareInfo.index === 0) {\n    const right = board[squareInfo.row - 1][squareInfo.index + 1];\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return board;\n    }\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingLight({ board, square: right, direction: 'right' })) {\n        const newBoard = copyBoard({ board });\n        const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n        nextRight.color = squareSelected;\n        return { newBoard };\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  }\n  // pode mover para os dois lados\n  const verify = { left: true, right: true };\n\n  // left\n  const left = board[squareInfo.row - 1][squareInfo.index - 1];\n  if (left && left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n  if (left && left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingLight({ board, square: left, direction: 'left' })) {\n      const newBoard = copyBoard({ board });\n      const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n      nextLeft.color = squareSelected;\n      return { newBoard };\n    } else {\n      verify.left = false;\n    }\n  }\n\n  // right\n  const right = board[squareInfo.row - 1][squareInfo.index + 1];\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingLight({ board, square: right, direction: 'right' })) {\n      const newBoard = copyBoard({ board });\n      const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return { newBoard };\n    } else {\n      verify.right = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction showMovementDark({ board, squareInfo }) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n\n  if (squareInfo.row === 9) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const right = board[squareInfo.row + 1][squareInfo.index - 1];\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return board;\n    }\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingDark({ board, square: right, direction: 'right' })) {\n        const newBoard = copyBoard({ board });\n        const nextRight = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n        nextRight.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  }\n  // se for 0 só pode mover pra direita\n  if (squareInfo.index === 0) {\n    const left = board[squareInfo.row + 1][squareInfo.index + 1];\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return board;\n    }\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingDark({ board, square: left, direction: 'left' })) {\n        const newBoard = copyBoard({ board });\n        const nextleft = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n        nextleft.color = squareSelected;\n        return newBoard;\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  }\n  // pode mover para os dois lados\n  const verify = { left: true, right: true };\n\n  // left\n  const right = board[squareInfo.row + 1][squareInfo.index - 1];\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingDark({ board, square: right, direction: 'right' })) {\n      const newBoard = copyBoard({ board });\n      const nextright = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n      nextright.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.right = false;\n    }\n  }\n\n  // right\n  const left = board[squareInfo.row + 1][squareInfo.index + 1];\n  if (left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n  if (left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingDark({ board, square: left, direction: 'left' })) {\n      const newBoard = copyBoard({ board });\n      const nextRight = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return newBoard;\n    } else {\n      verify.left = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction showMovementDarkQueen({ board, squareInfo }) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 9) {\n    return board;\n  }\n\n  if (squareInfo.index === 9) {\n    const right = board[squareInfo.row + 1][squareInfo.index - 1];\n    if (right && right.piece && right.piece.color === pieceLighter) {\n      return board;\n    }\n    if (right && right.piece && right.piece.color !== pieceLighter) {\n      if (checkEatingDark({ board, square: right, direction: 'right' })) {\n        const newBoard = copyBoard({ board });\n        const nextRight = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n        nextRight.color = squareSelected;\n        return { newBoard };\n      } else {\n        return board;\n      }\n    }\n\n    right.color = squareSelected;\n    return board;\n  }\n  // se for 0 só pode mover pra direita\n  if (squareInfo.index === 0) {\n    const left = board[squareInfo.row + 1][squareInfo.index + 1];\n    if (left && left.piece && left.piece.color === pieceLighter) {\n      return board;\n    }\n    if (left && left.piece && left.piece.color !== pieceLighter) {\n      if (checkEatingDark({ board, square: left, direction: 'left' })) {\n        const newBoard = copyBoard({ board });\n        const nextleft = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n        nextleft.color = squareSelected;\n        return { newBoard };\n      } else {\n        return board;\n      }\n    }\n\n    left.color = squareSelected;\n    return board;\n  }\n  // pode mover para os dois lados\n  const verify = { left: true, right: true };\n\n  // left\n  const right = board[squareInfo.row + 1][squareInfo.index - 1];\n  if (right && right.piece && right.piece.color === pieceLighter) {\n    verify.right = false;\n  }\n  if (right && right.piece && right.piece.color !== pieceLighter) {\n    if (checkEatingDark({ board, square: right, direction: 'right' })) {\n      const newBoard = copyBoard({ board });\n      const nextright = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n      nextright.color = squareSelected;\n      return { newBoard };\n    } else {\n      verify.right = false;\n    }\n  }\n\n  // right\n  const left = board[squareInfo.row + 1][squareInfo.index + 1];\n  if (left.piece && left.piece.color === pieceLighter) {\n    verify.left = false;\n  }\n  if (left.piece && left.piece.color !== pieceLighter) {\n    if (checkEatingDark({ board, square: left, direction: 'left' })) {\n      const newBoard = copyBoard({ board });\n      const nextRight = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n      nextRight.color = squareSelected;\n      return { newBoard };\n    } else {\n      verify.left = false;\n    }\n  }\n\n  if (verify.right) {\n    right.color = squareSelected;\n  }\n  if (verify.left) {\n    left.color = squareSelected;\n  }\n\n  return board;\n}\n\nfunction showMovementQueen({ board, squareInfo }) {\n  if (squareInfo.piece.color === pieceLighter) {\n    const boardDark = showMovementDarkQueen({ board, squareInfo });\n    if (!Array.isArray(boardDark)) {\n      return boardDark.newBoard;\n    }\n    return showMovementLight({ board: boardDark, squareInfo });\n  }\n  const boardLight = showMovementLightQueen({ board, squareInfo });\n  if (!Array.isArray(boardLight)) {\n    return boardLight.newBoard;\n  }\n  return showMovementDark({ board: boardLight, squareInfo });\n}\n\nfunction checkTestLightEat({ board, square, direction }) {\n  const squareInfo = getSquareInfo({ board, square });\n  if (squareInfo.row - 2 <= -1 || squareInfo.row + 2 >= 10) {\n    return false;\n  }\n  if (direction === 'left') {\n    if (squareInfo.index === 0 || squareInfo.index === 1) {\n      return false;\n    }\n    if (!board[squareInfo.row - 2][squareInfo.index - 2].piece) {\n      if (board[squareInfo.row - 1][squareInfo.index - 1].piece) {\n        return true;\n      }\n    }\n  } else {\n    if (squareInfo.index === 9 || squareInfo.index === 8) {\n      return false;\n    }\n    if (!board[squareInfo.row - 2][squareInfo.index + 2].piece) {\n      if (board[squareInfo.row - 1][squareInfo.index + 1].piece) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction checkTestDarkEat({ board, square, direction }) {\n  const squareInfo = getSquareInfo({ board, square });\n  if (squareInfo.row - 2 <= -1 || squareInfo.row + 2 >= 10) {\n    return false;\n  }\n  if (direction === 'left') {\n    if (squareInfo.index === 9) {\n      return false;\n    }\n\n    if (!board[squareInfo.row + 2][squareInfo.index + 2].piece) {\n      if (board[squareInfo.row + 1][squareInfo.index + 1].piece) {\n        return true;\n      }\n    }\n  } else {\n    if (squareInfo.index === 0) {\n      return false;\n    }\n    if (!board[squareInfo.row + 2][squareInfo.index - 2].piece) {\n      if (board[squareInfo.row + 1][squareInfo.index - 1].piece) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function movePiece({ board, square, selected }) {\n  if (square.color !== squareSelected) return;\n  const selectedInfo = getSquareInfo({ board, square: selected });\n  const squareInfo = getSquareInfo({ board, square });\n  const newBoard = copyBoard({ board });\n  let eat = false;\n\n  // add\n  newBoard[squareInfo.row][squareInfo.index].piece = selected.piece;\n\n  // check if can be a queen\n  if (square && !square.piece) {\n    // white\n    if (squareInfo.row === 9) {\n      newBoard[squareInfo.row][squareInfo.index].piece.queen = true;\n    }\n    // black\n    if (squareInfo.row === 0) {\n      newBoard[squareInfo.row][squareInfo.index].piece.queen = true;\n    }\n  }\n\n  // remove\n  newBoard[selectedInfo.row][selectedInfo.index].piece = null;\n\n  // branco\n  if (selectedInfo.row - squareInfo.row === 2) {\n    if (squareInfo.index > selectedInfo.index) {\n      //right\n      newBoard[selectedInfo.row - 1][selectedInfo.index + 1].piece = null;\n    } else {\n      //left\n      newBoard[selectedInfo.row - 1][selectedInfo.index - 1].piece = null;\n    }\n    if (\n      checkTestLightEat({ board: newBoard, square, direction: 'right' }) ||\n      checkTestLightEat({ board: newBoard, square, direction: 'left' })\n    ) {\n      console.log('ele pode comer meu parceiro testLightEat');\n      eat = true;\n    }\n    // se a peça for queen tente para o dark tbm\n    if (\n      selected &&\n      selected.piece &&\n      selected.piece.queen &&\n      selected.piece.color === pieceLighter\n    ) {\n      if (\n        checkTestDarkEat({ board: newBoard, square, direction: 'right' }) ||\n        checkTestDarkEat({ board: newBoard, square, direction: 'left' })\n      ) {\n        console.log('ele pode comer meu parceiro testDarkEat');\n        eat = true;\n      }\n    }\n  }\n  // preta\n  if (squareInfo.row - selectedInfo.row === 2) {\n    if (selectedInfo.index > squareInfo.index) {\n      //right\n      newBoard[selectedInfo.row + 1][selectedInfo.index - 1].piece = null;\n    } else {\n      //left\n      newBoard[selectedInfo.row + 1][selectedInfo.index + 1].piece = null;\n    }\n  }\n\n  return { newBoard, eat };\n}\n"]},"metadata":{},"sourceType":"module"}