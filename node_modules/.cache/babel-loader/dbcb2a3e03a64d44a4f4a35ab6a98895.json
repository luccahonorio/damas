{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { signInSuccess, signFailure } from './actions';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload; // ws.withJwtToken(token).connect();\n    // handleLogin({ user_id: user.id });\n\n    yield put(signInSuccess('token', 'ser'));\n  } catch (err) {\n    console.tron.log(err);\n    yield put(signFailure());\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const {\n    token\n  } = payload.auth;\n\n  if (token) {}\n}\nexport function handleLogout() {\n  history.push('/');\n}\nexport default all([takeLatest('persist/REHYDRATE', setToken), takeLatest('@auth/SIGN_IN_REQUEST', signIn), takeLatest('@auth/SIGN_OUT', handleLogout)]);","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","signInSuccess","signFailure","signIn","payload","email","password","err","console","tron","log","setToken","token","auth","handleLogout","history","push"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,WAA3C;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,OAA5B,CADE,CAGF;AAEA;;AAEA,UAAML,GAAG,CAACE,aAAa,CAAC,OAAD,EAAU,KAAV,CAAd,CAAT;AACD,GARD,CAQE,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBH,GAAjB;AACA,UAAMR,GAAG,CAACG,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,SAASS,QAAT,CAAkB;AAAEP,EAAAA;AAAF,CAAlB,EAA+B;AACpC,MAAI,CAACA,OAAL,EAAc;AAEd,QAAM;AAAEQ,IAAAA;AAAF,MAAYR,OAAO,CAACS,IAA1B;;AAEA,MAAID,KAAJ,EAAW,CACV;AACF;AAED,OAAO,SAASE,YAAT,GAAwB;AAC7BC,EAAAA,OAAO,CAACC,IAAR,CAAa,GAAb;AACD;AAED,eAAehB,GAAG,CAAC,CACjBH,UAAU,CAAC,mBAAD,EAAsBc,QAAtB,CADO,EAEjBd,UAAU,CAAC,uBAAD,EAA0BM,MAA1B,CAFO,EAGjBN,UAAU,CAAC,gBAAD,EAAmBiB,YAAnB,CAHO,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport { signInSuccess, signFailure } from './actions';\n\nexport function* signIn({ payload }) {\n  try {\n    const { email, password } = payload;\n\n    // ws.withJwtToken(token).connect();\n\n    // handleLogin({ user_id: user.id });\n\n    yield put(signInSuccess('token', 'ser'));\n  } catch (err) {\n    console.tron.log(err);\n    yield put(signFailure());\n  }\n}\n\nexport function setToken({ payload }) {\n  if (!payload) return;\n\n  const { token } = payload.auth;\n\n  if (token) {\n  }\n}\n\nexport function handleLogout() {\n  history.push('/');\n}\n\nexport default all([\n  takeLatest('persist/REHYDRATE', setToken),\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn),\n  takeLatest('@auth/SIGN_OUT', handleLogout),\n]);\n"]},"metadata":{},"sourceType":"module"}