{"ast":null,"code":"var _jsxFileName = \"/Users/henriqueolivoantonio/Desktop/Projects/damas/src/page/Dashboard/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FaCrown } from 'react-icons/fa';\nimport { handleAlphaBeta } from '../../logic/ia';\nimport { Container, Board, Square, Piece } from './styles';\nimport { showMovement, movePiece, squareSelected, pieceDarker } from '../../logic';\nimport { showMovementsAction, movePiecesAction } from '../../store/modules/board/actions';\nexport default function Page() {\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.board.board);\n  const [selected, setSelected] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [keepEat, setKeepEat] = useState(false);\n\n  function showMovements({\n    square\n  }) {\n    try {\n      if (square.piece.color === pieceDarker) return;\n      if (turn === 'black') return;\n      dispatch(showMovementsAction({\n        board: showMovement({\n          board,\n          square\n        })\n      }));\n      setSelected(square);\n    } catch (err) {\n      console.log('erro no showMovements');\n    }\n  }\n\n  function movePieces({\n    square,\n    selected\n  }) {\n    try {\n      const data = movePiece({\n        board,\n        square,\n        selected\n      });\n\n      if (data && data.newBoard) {\n        const {\n          newBoard,\n          eat\n        } = data;\n        console.log(newBoard);\n        dispatch(movePiecesAction({\n          board: newBoard ? newBoard : board\n        }));\n        setSelected(null); // se o branco jogou mude para o turno do preto\n\n        if (eat) {\n          setTurn('white');\n        } else {\n          if (selected.piece.color !== pieceDarker) {\n            setTurn('black');\n          }\n        }\n\n        console.log(newBoard);\n        return newBoard;\n      }\n    } catch (err) {\n      console.log('erro no MovePieces');\n    }\n  }\n\n  function moveIA() {\n    try {\n      const {\n        selected,\n        square,\n        sum\n      } = handleAlphaBeta({\n        board\n      });\n      console.log(selected, square, sum);\n      square.color = squareSelected;\n      const newBoard = movePieces({\n        square,\n        selected\n      }); // se ele não for comer não porque testar novamente\n\n      if (sum >= 1) {\n        const {\n          sum: sum1\n        } = handleAlphaBeta({\n          board: newBoard\n        });\n\n        if (sum1 >= 1) {\n          setKeepEat(true);\n        } else {\n          setTurn('white');\n        }\n      } else {\n        setTurn('white');\n      }\n    } catch (err) {\n      console.log('Erro no moveIA', err);\n    }\n  }\n\n  useEffect(() => {\n    if (!keepEat) return;\n    setTimeout(moveIA, 1000);\n    setKeepEat(false); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [board, keepEat]);\n  useEffect(() => {\n    if (turn === 'black') {\n      setTimeout(moveIA, 1000);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [turn]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, board.map(row => row.map(sq => /*#__PURE__*/React.createElement(Square, {\n    key: row.indexOf(sq),\n    color: sq.color,\n    onClick: () => movePieces({\n      square: sq,\n      selected\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, sq.piece && /*#__PURE__*/React.createElement(Piece, {\n    key: row.indexOf(sq),\n    color: sq.piece.color,\n    onClick: () => showMovements({\n      square: sq\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, sq.piece.queen && /*#__PURE__*/React.createElement(FaCrown, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 38\n    }\n  })))))));\n}","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/page/Dashboard/index.js"],"names":["React","useState","useEffect","useSelector","useDispatch","FaCrown","handleAlphaBeta","Container","Board","Square","Piece","showMovement","movePiece","squareSelected","pieceDarker","showMovementsAction","movePiecesAction","Page","dispatch","board","state","selected","setSelected","turn","setTurn","keepEat","setKeepEat","showMovements","square","piece","color","err","console","log","movePieces","data","newBoard","eat","moveIA","sum","sum1","setTimeout","map","row","sq","indexOf","queen"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FaCrown } from 'react-icons/fa';\n\nimport { handleAlphaBeta } from '../../logic/ia';\nimport { Container, Board, Square, Piece } from './styles';\nimport {\n  showMovement,\n  movePiece,\n  squareSelected,\n  pieceDarker,\n} from '../../logic';\nimport {\n  showMovementsAction,\n  movePiecesAction,\n} from '../../store/modules/board/actions';\n\nexport default function Page() {\n  const dispatch = useDispatch();\n  const board = useSelector((state) => state.board.board);\n  const [selected, setSelected] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [keepEat, setKeepEat] = useState(false);\n\n  function showMovements({ square }) {\n    try {\n      if (square.piece.color === pieceDarker) return;\n      if (turn === 'black') return;\n\n      dispatch(showMovementsAction({ board: showMovement({ board, square }) }));\n      setSelected(square);\n    } catch (err) {\n      console.log('erro no showMovements');\n    }\n  }\n\n  function movePieces({ square, selected }) {\n    try {\n      const data = movePiece({ board, square, selected });\n      if (data && data.newBoard) {\n        const { newBoard, eat } = data;\n        console.log(newBoard);\n        dispatch(movePiecesAction({ board: newBoard ? newBoard : board }));\n        setSelected(null);\n\n        // se o branco jogou mude para o turno do preto\n\n        if (eat) {\n          setTurn('white');\n        } else {\n          if (selected.piece.color !== pieceDarker) {\n            setTurn('black');\n          }\n        }\n\n        console.log(newBoard);\n        return newBoard;\n      }\n    } catch (err) {\n      console.log('erro no MovePieces');\n    }\n  }\n\n  function moveIA() {\n    try {\n      const { selected, square, sum } = handleAlphaBeta({\n        board,\n      });\n\n      console.log(selected, square, sum);\n      square.color = squareSelected;\n      const newBoard = movePieces({ square, selected });\n      // se ele não for comer não porque testar novamente\n      if (sum >= 1) {\n        const { sum: sum1 } = handleAlphaBeta({\n          board: newBoard,\n        });\n        if (sum1 >= 1) {\n          setKeepEat(true);\n        } else {\n          setTurn('white');\n        }\n      } else {\n        setTurn('white');\n      }\n    } catch (err) {\n      console.log('Erro no moveIA', err);\n    }\n  }\n\n  useEffect(() => {\n    if (!keepEat) return;\n\n    setTimeout(moveIA, 1000);\n    setKeepEat(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [board, keepEat]);\n\n  useEffect(() => {\n    if (turn === 'black') {\n      setTimeout(moveIA, 1000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [turn]);\n\n  return (\n    <Container>\n      <Board>\n        {board.map((row) =>\n          row.map((sq) => (\n            <Square\n              key={row.indexOf(sq)}\n              color={sq.color}\n              onClick={() => movePieces({ square: sq, selected })}\n            >\n              {sq.piece && (\n                <Piece\n                  key={row.indexOf(sq)}\n                  color={sq.piece.color}\n                  onClick={() => showMovements({ square: sq })}\n                >\n                  {sq.piece.queen && <FaCrown size={20} />}\n                </Piece>\n              )}\n            </Square>\n          ))\n        )}\n      </Board>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}