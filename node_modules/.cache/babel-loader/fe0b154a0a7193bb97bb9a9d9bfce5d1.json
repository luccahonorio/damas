{"ast":null,"code":"import { pieceDarker, pieceLighter, squareDarker, squareLighter } from '../store/modules/board/recucer';\n\nfunction handleGetIndex({\n  board,\n  square\n}) {\n  let indexSquare = null;\n  board.forEach(row => row.forEach(sq => {\n    if (sq && sq.id && sq.id === square.id) {\n      indexSquare = {\n        row: board.indexOf(row),\n        index: row.indexOf(sq),\n        color: sq.piece\n      };\n    }\n  }));\n  return indexSquare;\n} //Handle if the peace can move by her position in the board\n\n\nexport function handlePositionPiece({\n  board,\n  square\n}) {\n  const squareIndex = handleGetIndex({\n    board,\n    square\n  }); // lighter\n\n  if (squareIndex.color === pieceLighter) {\n    // if position is 9\n    if (squareIndex.index === 9) {\n      return {\n        right: false,\n        left: true\n      };\n    } // if position is 0\n\n\n    if (squareIndex.index === 0) {\n      return {\n        right: true,\n        left: false\n      };\n    }\n  } else {\n    // darker\n    // if position is 9\n    if (squareIndex.index === 9) {\n      return {\n        right: true,\n        left: false\n      };\n    } // if position is 0\n\n\n    if (squareIndex.index === 0) {\n      return {\n        right: false,\n        left: true\n      };\n    }\n  } // if is allowed on two ways\n\n\n  return {\n    right: true,\n    left: true\n  };\n} // Handle if the peace can move analysing her color\n\nexport function handleAllowedPiece({\n  board,\n  squareIndex,\n  allowedMovements\n}) {\n  // light\n  // if right is allowed\n  // if left is allowed\n  // if both sides are allowed\n  if (squareIndex.color === pieceLighter) {\n    if (allowedMovements.right) {}\n\n    if (allowedMovements.left) {}\n\n    return allowedMovements;\n  } else {// dark\n    // if right is allowed\n    // if left is allowed\n    // if both sides are allowed\n  }\n}","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/logic/index.js"],"names":["pieceDarker","pieceLighter","squareDarker","squareLighter","handleGetIndex","board","square","indexSquare","forEach","row","sq","id","indexOf","index","color","piece","handlePositionPiece","squareIndex","right","left","handleAllowedPiece","allowedMovements"],"mappings":"AAAA,SACEA,WADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,aAJF,QAKO,gCALP;;AAOA,SAASC,cAAT,CAAwB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAxB,EAA2C;AACzC,MAAIC,WAAW,GAAG,IAAlB;AAEAF,EAAAA,KAAK,CAACG,OAAN,CAAeC,GAAD,IACZA,GAAG,CAACD,OAAJ,CAAaE,EAAD,IAAQ;AAClB,QAAIA,EAAE,IAAIA,EAAE,CAACC,EAAT,IAAeD,EAAE,CAACC,EAAH,KAAUL,MAAM,CAACK,EAApC,EAAwC;AACtCJ,MAAAA,WAAW,GAAG;AACZE,QAAAA,GAAG,EAAEJ,KAAK,CAACO,OAAN,CAAcH,GAAd,CADO;AAEZI,QAAAA,KAAK,EAAEJ,GAAG,CAACG,OAAJ,CAAYF,EAAZ,CAFK;AAGZI,QAAAA,KAAK,EAAEJ,EAAE,CAACK;AAHE,OAAd;AAKD;AACF,GARD,CADF;AAYA,SAAOR,WAAP;AACD,C,CACD;;;AACA,OAAO,SAASS,mBAAT,CAA6B;AAAEX,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAA7B,EAAgD;AACrD,QAAMW,WAAW,GAAGb,cAAc,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,CAAlC,CADqD,CAGrD;;AACA,MAAIW,WAAW,CAACH,KAAZ,KAAsBb,YAA1B,EAAwC;AACtC;AACA,QAAIgB,WAAW,CAACJ,KAAZ,KAAsB,CAA1B,EAA6B;AAC3B,aAAO;AACLK,QAAAA,KAAK,EAAE,KADF;AAELC,QAAAA,IAAI,EAAE;AAFD,OAAP;AAID,KAPqC,CAStC;;;AACA,QAAIF,WAAW,CAACJ,KAAZ,KAAsB,CAA1B,EAA6B;AAC3B,aAAO;AACLK,QAAAA,KAAK,EAAE,IADF;AAELC,QAAAA,IAAI,EAAE;AAFD,OAAP;AAID;AACF,GAhBD,MAgBO;AACL;AAEA;AACA,QAAIF,WAAW,CAACJ,KAAZ,KAAsB,CAA1B,EAA6B;AAC3B,aAAO;AACLK,QAAAA,KAAK,EAAE,IADF;AAELC,QAAAA,IAAI,EAAE;AAFD,OAAP;AAID,KATI,CAWL;;;AACA,QAAIF,WAAW,CAACJ,KAAZ,KAAsB,CAA1B,EAA6B;AAC3B,aAAO;AACLK,QAAAA,KAAK,EAAE,KADF;AAELC,QAAAA,IAAI,EAAE;AAFD,OAAP;AAID;AACF,GAtCoD,CAwCrD;;;AACA,SAAO;AACLD,IAAAA,KAAK,EAAE,IADF;AAELC,IAAAA,IAAI,EAAE;AAFD,GAAP;AAID,C,CACD;;AACA,OAAO,SAASC,kBAAT,CAA4B;AAAEf,EAAAA,KAAF;AAASY,EAAAA,WAAT;AAAsBI,EAAAA;AAAtB,CAA5B,EAAsE;AAC3E;AACA;AACA;AACA;AACA,MAAIJ,WAAW,CAACH,KAAZ,KAAsBb,YAA1B,EAAwC;AACtC,QAAIoB,gBAAgB,CAACH,KAArB,EAA4B,CAC3B;;AAED,QAAIG,gBAAgB,CAACF,IAArB,EAA2B,CAC1B;;AACD,WAAOE,gBAAP;AACD,GAPD,MAOO,CACL;AACA;AACA;AACA;AACD;AACF","sourcesContent":["import {\n  pieceDarker,\n  pieceLighter,\n  squareDarker,\n  squareLighter,\n} from '../store/modules/board/recucer';\n\nfunction handleGetIndex({ board, square }) {\n  let indexSquare = null;\n\n  board.forEach((row) =>\n    row.forEach((sq) => {\n      if (sq && sq.id && sq.id === square.id) {\n        indexSquare = {\n          row: board.indexOf(row),\n          index: row.indexOf(sq),\n          color: sq.piece,\n        };\n      }\n    })\n  );\n\n  return indexSquare;\n}\n//Handle if the peace can move by her position in the board\nexport function handlePositionPiece({ board, square }) {\n  const squareIndex = handleGetIndex({ board, square });\n\n  // lighter\n  if (squareIndex.color === pieceLighter) {\n    // if position is 9\n    if (squareIndex.index === 9) {\n      return {\n        right: false,\n        left: true,\n      };\n    }\n\n    // if position is 0\n    if (squareIndex.index === 0) {\n      return {\n        right: true,\n        left: false,\n      };\n    }\n  } else {\n    // darker\n\n    // if position is 9\n    if (squareIndex.index === 9) {\n      return {\n        right: true,\n        left: false,\n      };\n    }\n\n    // if position is 0\n    if (squareIndex.index === 0) {\n      return {\n        right: false,\n        left: true,\n      };\n    }\n  }\n\n  // if is allowed on two ways\n  return {\n    right: true,\n    left: true,\n  };\n}\n// Handle if the peace can move analysing her color\nexport function handleAllowedPiece({ board, squareIndex, allowedMovements }) {\n  // light\n  // if right is allowed\n  // if left is allowed\n  // if both sides are allowed\n  if (squareIndex.color === pieceLighter) {\n    if (allowedMovements.right) {\n    }\n\n    if (allowedMovements.left) {\n    }\n    return allowedMovements;\n  } else {\n    // dark\n    // if right is allowed\n    // if left is allowed\n    // if both sides are allowed\n  }\n}\n"]},"metadata":{},"sourceType":"module"}