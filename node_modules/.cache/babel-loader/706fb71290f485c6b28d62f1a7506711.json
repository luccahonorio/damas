{"ast":null,"code":"import { takeLatest, put, all } from 'redux-saga/effects';\nimport { handlePositionPiece, handleAllowedPiece, printAllowedMovements } from '../../../logic/index';\nimport { handlePrintMovementsSuccess } from './actions';\nexport function* handlePrintMovements({\n  payload\n}) {\n  const {\n    board,\n    square\n  } = payload; // checking witch side is available\n\n  const allowedPositions = handlePositionPiece({\n    board,\n    square\n  }); // checking if this side have a piece\n\n  const allowedMovements = handleAllowedPiece({\n    board,\n    square,\n    allowedMovements: allowedPositions\n  });\n  const newBoard = printAllowedMovements({\n    allowedMovements,\n    board\n  });\n  yield put(handlePrintMovementsSuccess({\n    board: newBoard,\n    selected: {\n      square,\n      positions: allowedMovements\n    }\n  }));\n}\nexport function handleMovePieces({\n  payload\n}) {\n  const {\n    board,\n    square,\n    selected\n  } = payload; // const right = selected.square.right.id;\n  // const left = selected.square.left.id;\n}\nexport default all([takeLatest('@board/HANDLE_PRINT_MOVEMENTS', handlePrintMovements), takeLatest('@board/HANDLE_MOVE_PIECES', handleMovePieces)]);","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/store/modules/board/sagas.js"],"names":["takeLatest","put","all","handlePositionPiece","handleAllowedPiece","printAllowedMovements","handlePrintMovementsSuccess","handlePrintMovements","payload","board","square","allowedPositions","allowedMovements","newBoard","selected","positions","handleMovePieces"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SACEC,mBADF,EAEEC,kBAFF,EAGEC,qBAHF,QAIO,sBAJP;AAKA,SAASC,2BAAT,QAA4C,WAA5C;AAEA,OAAO,UAAUC,oBAAV,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA4C;AACjD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBF,OAA1B,CADiD,CAGjD;;AACA,QAAMG,gBAAgB,GAAGR,mBAAmB,CAAC;AAAEM,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,CAA5C,CAJiD,CAKjD;;AACA,QAAME,gBAAgB,GAAGR,kBAAkB,CAAC;AAC1CK,IAAAA,KAD0C;AAE1CC,IAAAA,MAF0C;AAG1CE,IAAAA,gBAAgB,EAAED;AAHwB,GAAD,CAA3C;AAMA,QAAME,QAAQ,GAAGR,qBAAqB,CAAC;AAAEO,IAAAA,gBAAF;AAAoBH,IAAAA;AAApB,GAAD,CAAtC;AACA,QAAMR,GAAG,CACPK,2BAA2B,CAAC;AAC1BG,IAAAA,KAAK,EAAEI,QADmB;AAE1BC,IAAAA,QAAQ,EAAE;AAAEJ,MAAAA,MAAF;AAAUK,MAAAA,SAAS,EAAEH;AAArB;AAFgB,GAAD,CADpB,CAAT;AAMD;AAED,OAAO,SAASI,gBAAT,CAA0B;AAAER,EAAAA;AAAF,CAA1B,EAAuC;AAC5C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBI,IAAAA;AAAjB,MAA8BN,OAApC,CAD4C,CAE5C;AACA;AACD;AAED,eAAeN,GAAG,CAAC,CACjBF,UAAU,CAAC,+BAAD,EAAkCO,oBAAlC,CADO,EAEjBP,UAAU,CAAC,2BAAD,EAA8BgB,gBAA9B,CAFO,CAAD,CAAlB","sourcesContent":["import { takeLatest, put, all } from 'redux-saga/effects';\nimport {\n  handlePositionPiece,\n  handleAllowedPiece,\n  printAllowedMovements,\n} from '../../../logic/index';\nimport { handlePrintMovementsSuccess } from './actions';\n\nexport function* handlePrintMovements({ payload }) {\n  const { board, square } = payload;\n\n  // checking witch side is available\n  const allowedPositions = handlePositionPiece({ board, square });\n  // checking if this side have a piece\n  const allowedMovements = handleAllowedPiece({\n    board,\n    square,\n    allowedMovements: allowedPositions,\n  });\n\n  const newBoard = printAllowedMovements({ allowedMovements, board });\n  yield put(\n    handlePrintMovementsSuccess({\n      board: newBoard,\n      selected: { square, positions: allowedMovements },\n    })\n  );\n}\n\nexport function handleMovePieces({ payload }) {\n  const { board, square, selected } = payload;\n  // const right = selected.square.right.id;\n  // const left = selected.square.left.id;\n}\n\nexport default all([\n  takeLatest('@board/HANDLE_PRINT_MOVEMENTS', handlePrintMovements),\n  takeLatest('@board/HANDLE_MOVE_PIECES', handleMovePieces),\n]);\n"]},"metadata":{},"sourceType":"module"}