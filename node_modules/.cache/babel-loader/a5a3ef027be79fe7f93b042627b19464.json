{"ast":null,"code":"import { takeLatest, put, all } from 'redux-saga/effects';\nimport { handlePositionPiece, handleAllowedPiece, printAllowedMovements, handlePieceMovement } from '../../../logic/index';\nimport { handlePrintMovementsSuccess, handleMovementSuccess } from './actions';\nexport function* handlePrintMovements({\n  payload\n}) {\n  const {\n    board,\n    square\n  } = payload; // checking witch side is available\n\n  const allowedPositions = handlePositionPiece({\n    board,\n    square\n  }); // checking if this side have a piece\n\n  const allowedMovements = handleAllowedPiece({\n    board,\n    square,\n    allowedMovements: allowedPositions\n  });\n  const newBoard = printAllowedMovements({\n    allowedMovements\n  });\n  yield put(handlePrintMovementsSuccess({\n    board: newBoard,\n    selected: square\n  }));\n}\nexport function* handleMovement({\n  payload\n}) {\n  if (payload.selected.id === payload.squareSelected.id) {\n    return;\n  }\n\n  const newBoard = handlePieceMovement({\n    selected: payload.selected,\n    squareSelected: payload.squareSelected\n  });\n  console.log(newBoard, payload.selected, payload.squareSelected);\n  yield put(handleMovementSuccess({\n    board: []\n  }));\n}\nexport default all([takeLatest('@board/HANDLE_PRINT_MOVEMENTS', handlePrintMovements), takeLatest('@board/HANDLE_MOVEMENT', handleMovement)]);","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/store/modules/board/sagas.js"],"names":["takeLatest","put","all","handlePositionPiece","handleAllowedPiece","printAllowedMovements","handlePieceMovement","handlePrintMovementsSuccess","handleMovementSuccess","handlePrintMovements","payload","board","square","allowedPositions","allowedMovements","newBoard","selected","handleMovement","id","squareSelected","console","log"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SACEC,mBADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,mBAJF,QAKO,sBALP;AAMA,SAASC,2BAAT,EAAsCC,qBAAtC,QAAmE,WAAnE;AAEA,OAAO,UAAUC,oBAAV,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA4C;AACjD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBF,OAA1B,CADiD,CAGjD;;AACA,QAAMG,gBAAgB,GAAGV,mBAAmB,CAAC;AAAEQ,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,CAA5C,CAJiD,CAKjD;;AACA,QAAME,gBAAgB,GAAGV,kBAAkB,CAAC;AAC1CO,IAAAA,KAD0C;AAE1CC,IAAAA,MAF0C;AAG1CE,IAAAA,gBAAgB,EAAED;AAHwB,GAAD,CAA3C;AAMA,QAAME,QAAQ,GAAGV,qBAAqB,CAAC;AAAES,IAAAA;AAAF,GAAD,CAAtC;AACA,QAAMb,GAAG,CAACM,2BAA2B,CAAC;AAAEI,IAAAA,KAAK,EAAEI,QAAT;AAAmBC,IAAAA,QAAQ,EAAEJ;AAA7B,GAAD,CAA5B,CAAT;AACD;AAED,OAAO,UAAUK,cAAV,CAAyB;AAAEP,EAAAA;AAAF,CAAzB,EAAsC;AAC3C,MAAIA,OAAO,CAACM,QAAR,CAAiBE,EAAjB,KAAwBR,OAAO,CAACS,cAAR,CAAuBD,EAAnD,EAAuD;AACrD;AACD;;AAED,QAAMH,QAAQ,GAAGT,mBAAmB,CAAC;AACnCU,IAAAA,QAAQ,EAAEN,OAAO,CAACM,QADiB;AAEnCG,IAAAA,cAAc,EAAET,OAAO,CAACS;AAFW,GAAD,CAApC;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAsBL,OAAO,CAACM,QAA9B,EAAwCN,OAAO,CAACS,cAAhD;AACA,QAAMlB,GAAG,CAACO,qBAAqB,CAAC;AAAEG,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAtB,CAAT;AACD;AAED,eAAeT,GAAG,CAAC,CACjBF,UAAU,CAAC,+BAAD,EAAkCS,oBAAlC,CADO,EAEjBT,UAAU,CAAC,wBAAD,EAA2BiB,cAA3B,CAFO,CAAD,CAAlB","sourcesContent":["import { takeLatest, put, all } from 'redux-saga/effects';\nimport {\n  handlePositionPiece,\n  handleAllowedPiece,\n  printAllowedMovements,\n  handlePieceMovement,\n} from '../../../logic/index';\nimport { handlePrintMovementsSuccess, handleMovementSuccess } from './actions';\n\nexport function* handlePrintMovements({ payload }) {\n  const { board, square } = payload;\n\n  // checking witch side is available\n  const allowedPositions = handlePositionPiece({ board, square });\n  // checking if this side have a piece\n  const allowedMovements = handleAllowedPiece({\n    board,\n    square,\n    allowedMovements: allowedPositions,\n  });\n\n  const newBoard = printAllowedMovements({ allowedMovements });\n  yield put(handlePrintMovementsSuccess({ board: newBoard, selected: square }));\n}\n\nexport function* handleMovement({ payload }) {\n  if (payload.selected.id === payload.squareSelected.id) {\n    return;\n  }\n\n  const newBoard = handlePieceMovement({\n    selected: payload.selected,\n    squareSelected: payload.squareSelected,\n  });\n\n  console.log(newBoard, payload.selected, payload.squareSelected);\n  yield put(handleMovementSuccess({ board: [] }));\n}\n\nexport default all([\n  takeLatest('@board/HANDLE_PRINT_MOVEMENTS', handlePrintMovements),\n  takeLatest('@board/HANDLE_MOVEMENT', handleMovement),\n]);\n"]},"metadata":{},"sourceType":"module"}