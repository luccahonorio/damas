{"ast":null,"code":"import { pieceDarker, squareColorDarker, squareSelected, showMovement } from './index';\nconst eatNormalPiece = 1;\nconst eatQueenPiece = 1.5;\nconst movePiece = 0;\nconst diePiece = -1;\nconst dieQueenPiece = -1.5; // voce pode comer uma peça?\n// voce vai morrer?\n// se não vai andar normal\n// array [{id: 1, soma: 0}, {id: 2, soma: 1.5}]\n\nfunction getSquareInfo({\n  board,\n  square\n}) {\n  let indexSquare = null;\n  board.forEach(row => row.forEach(sq => {\n    if (sq && sq.id && sq.id === square.id) {\n      indexSquare = {\n        row: board.indexOf(row),\n        index: row.indexOf(sq),\n        piece: sq.piece,\n        id: sq.id\n      };\n    }\n  }));\n  return indexSquare;\n}\n\nfunction copyBoard({\n  board\n}) {\n  const newBoard = JSON.parse(JSON.stringify(board)).map(row => {\n    return row.map(sq => {\n      if (sq.color === squareSelected) {\n        sq.color = squareColorDarker;\n      }\n\n      return sq;\n    });\n  });\n  return newBoard;\n}\n\nfunction checkBestOption({\n  board,\n  square\n}) {}\n\nexport function handleAlphaBeta({\n  board\n}) {\n  board.forEach(row => row.forEach(square => {\n    if (square && square.id && square.piece && square.piece.color && square.piece.color === pieceDarker) {\n      return showMovement({\n        board,\n        square\n      });\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/logic/ia.js"],"names":["pieceDarker","squareColorDarker","squareSelected","showMovement","eatNormalPiece","eatQueenPiece","movePiece","diePiece","dieQueenPiece","getSquareInfo","board","square","indexSquare","forEach","row","sq","id","indexOf","index","piece","copyBoard","newBoard","JSON","parse","stringify","map","color","checkBestOption","handleAlphaBeta"],"mappings":"AAAA,SACEA,WADF,EAEEC,iBAFF,EAGEC,cAHF,EAIEC,YAJF,QAKO,SALP;AAMA,MAAMC,cAAc,GAAG,CAAvB;AACA,MAAMC,aAAa,GAAG,GAAtB;AACA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,QAAQ,GAAG,CAAC,CAAlB;AACA,MAAMC,aAAa,GAAG,CAAC,GAAvB,C,CAEA;AACA;AACA;AAEA;;AAEA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAvB,EAA0C;AACxC,MAAIC,WAAW,GAAG,IAAlB;AAEAF,EAAAA,KAAK,CAACG,OAAN,CAAeC,GAAD,IACZA,GAAG,CAACD,OAAJ,CAAaE,EAAD,IAAQ;AAClB,QAAIA,EAAE,IAAIA,EAAE,CAACC,EAAT,IAAeD,EAAE,CAACC,EAAH,KAAUL,MAAM,CAACK,EAApC,EAAwC;AACtCJ,MAAAA,WAAW,GAAG;AACZE,QAAAA,GAAG,EAAEJ,KAAK,CAACO,OAAN,CAAcH,GAAd,CADO;AAEZI,QAAAA,KAAK,EAAEJ,GAAG,CAACG,OAAJ,CAAYF,EAAZ,CAFK;AAGZI,QAAAA,KAAK,EAAEJ,EAAE,CAACI,KAHE;AAIZH,QAAAA,EAAE,EAAED,EAAE,CAACC;AAJK,OAAd;AAMD;AACF,GATD,CADF;AAaA,SAAOJ,WAAP;AACD;;AAED,SAASQ,SAAT,CAAmB;AAAEV,EAAAA;AAAF,CAAnB,EAA8B;AAC5B,QAAMW,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAed,KAAf,CAAX,EAAkCe,GAAlC,CAAuCX,GAAD,IAAS;AAC9D,WAAOA,GAAG,CAACW,GAAJ,CAASV,EAAD,IAAQ;AACrB,UAAIA,EAAE,CAACW,KAAH,KAAaxB,cAAjB,EAAiC;AAC/Ba,QAAAA,EAAE,CAACW,KAAH,GAAWzB,iBAAX;AACD;;AACD,aAAOc,EAAP;AACD,KALM,CAAP;AAMD,GAPgB,CAAjB;AAQA,SAAOM,QAAP;AACD;;AAED,SAASM,eAAT,CAAyB;AAAEjB,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAzB,EAA4C,CAAE;;AAE9C,OAAO,SAASiB,eAAT,CAAyB;AAAElB,EAAAA;AAAF,CAAzB,EAAoC;AACzCA,EAAAA,KAAK,CAACG,OAAN,CAAeC,GAAD,IACZA,GAAG,CAACD,OAAJ,CAAaF,MAAD,IAAY;AACtB,QACEA,MAAM,IACNA,MAAM,CAACK,EADP,IAEAL,MAAM,CAACQ,KAFP,IAGAR,MAAM,CAACQ,KAAP,CAAaO,KAHb,IAIAf,MAAM,CAACQ,KAAP,CAAaO,KAAb,KAAuB1B,WALzB,EAME;AACA,aAAOG,YAAY,CAAC;AAAEO,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,CAAnB;AACD;AACF,GAVD,CADF;AAaD","sourcesContent":["import {\n  pieceDarker,\n  squareColorDarker,\n  squareSelected,\n  showMovement,\n} from './index';\nconst eatNormalPiece = 1;\nconst eatQueenPiece = 1.5;\nconst movePiece = 0;\nconst diePiece = -1;\nconst dieQueenPiece = -1.5;\n\n// voce pode comer uma peça?\n// voce vai morrer?\n// se não vai andar normal\n\n// array [{id: 1, soma: 0}, {id: 2, soma: 1.5}]\n\nfunction getSquareInfo({ board, square }) {\n  let indexSquare = null;\n\n  board.forEach((row) =>\n    row.forEach((sq) => {\n      if (sq && sq.id && sq.id === square.id) {\n        indexSquare = {\n          row: board.indexOf(row),\n          index: row.indexOf(sq),\n          piece: sq.piece,\n          id: sq.id,\n        };\n      }\n    })\n  );\n\n  return indexSquare;\n}\n\nfunction copyBoard({ board }) {\n  const newBoard = JSON.parse(JSON.stringify(board)).map((row) => {\n    return row.map((sq) => {\n      if (sq.color === squareSelected) {\n        sq.color = squareColorDarker;\n      }\n      return sq;\n    });\n  });\n  return newBoard;\n}\n\nfunction checkBestOption({ board, square }) {}\n\nexport function handleAlphaBeta({ board }) {\n  board.forEach((row) =>\n    row.forEach((square) => {\n      if (\n        square &&\n        square.id &&\n        square.piece &&\n        square.piece.color &&\n        square.piece.color === pieceDarker\n      ) {\n        return showMovement({ board, square });\n      }\n    })\n  );\n}\n"]},"metadata":{},"sourceType":"module"}