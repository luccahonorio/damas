{"ast":null,"code":"import { pieceDarker, squareColorDarker, squareSelected, checkEatingDark, checkEatingLight } from './index';\nconst eatNormalPiece = 1;\nconst eatQueenPiece = 1.5;\nconst movePiece = 0;\nconst diePiece = -1;\nconst dieQueenPiece = -1.5; // voce pode comer uma peça?\n// voce vai morrer?\n// se não vai andar normal\n// array [{id: 1, soma: 0}, {id: 2, soma: 1.5}]\n\nfunction getSquareInfo({\n  board,\n  square\n}) {\n  let indexSquare = null;\n  board.forEach(row => row.forEach(sq => {\n    if (sq && sq.id && sq.id === square.id) {\n      indexSquare = {\n        row: board.indexOf(row),\n        index: row.indexOf(sq),\n        piece: sq.piece,\n        id: sq.id\n      };\n    }\n  }));\n  return indexSquare;\n}\n\nfunction copyBoard({\n  board\n}) {\n  const newBoard = JSON.parse(JSON.stringify(board)).map(row => {\n    return row.map(sq => {\n      if (sq.color === squareSelected) {\n        sq.color = squareColorDarker;\n      }\n\n      return sq;\n    });\n  });\n  return newBoard;\n}\n\nfunction showMovementLightQueen({\n  board,\n  squareInfo\n}) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 0) {\n    return false;\n  }\n\n  if (squareInfo.index === 9) {\n    const left = board[squareInfo.row - 1][squareInfo.index - 1];\n\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return false;\n    }\n\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingLight({\n        board,\n        square: left,\n        direction: 'left'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n        return {\n          next: nextLeft\n        };\n      } else {\n        return false;\n      }\n    }\n\n    return left;\n  } // se for 0 só pode mover pra direita\n\n\n  if (squareInfo.index === 0) {\n    const right = board[squareInfo.row - 1][squareInfo.index + 1];\n\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return false;\n    }\n\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingLight({\n        board,\n        square: right,\n        direction: 'right'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n        return {\n          next: nextRight\n        };\n      } else {\n        return false;\n      }\n    }\n\n    return right;\n  } // pode mover para os dois lados\n\n\n  const verify = {\n    left: true,\n    right: true\n  }; // left\n\n  const left = board[squareInfo.row - 1][squareInfo.index - 1];\n\n  if (left && left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n\n  if (left && left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingLight({\n      board,\n      square: left,\n      direction: 'left'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n      return {\n        next: nextLeft\n      };\n    } else {\n      verify.left = false;\n    }\n  } // right\n\n\n  const right = board[squareInfo.row - 1][squareInfo.index + 1];\n\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingLight({\n      board,\n      square: right,\n      direction: 'right'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n      return {\n        next: nextRight\n      };\n    } else {\n      verify.right = false;\n    }\n  }\n\n  let result = [];\n\n  if (verify.right) {\n    result = [right];\n  }\n\n  if (verify.left) {\n    result = [...result, left];\n  }\n\n  return result;\n} // ele pode retornar ou false ou o objeto\n\n\nfunction showMovementDark({\n  board,\n  squareInfo\n}) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 9) {\n    return false;\n  }\n\n  if (squareInfo.index === 9) {\n    const right = board[squareInfo.row + 1][squareInfo.index - 1];\n\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return false;\n    }\n\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingDark({\n        board,\n        square: right,\n        direction: 'right'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextRight = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n        return nextRight;\n      } else {\n        return false;\n      }\n    }\n\n    return right;\n  } // se for 0 só pode mover pra direita\n\n\n  if (squareInfo.index === 0) {\n    const left = board[squareInfo.row + 1][squareInfo.index + 1];\n\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return false;\n    }\n\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingDark({\n        board,\n        square: left,\n        direction: 'left'\n      })) {\n        const newBoard = copyBoard({\n          board\n        });\n        const nextleft = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n        return nextleft;\n      } else {\n        return false;\n      }\n    }\n\n    return left;\n  } // pode mover para os dois lados\n\n\n  const verify = {\n    left: true,\n    right: true\n  }; // left\n\n  const right = board[squareInfo.row + 1][squareInfo.index - 1];\n\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingDark({\n      board,\n      square: right,\n      direction: 'right'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextright = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n      return nextright;\n    } else {\n      verify.right = false;\n    }\n  } // right\n\n\n  const left = board[squareInfo.row + 1][squareInfo.index + 1];\n\n  if (left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n\n  if (left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingDark({\n      board,\n      square: left,\n      direction: 'left'\n    })) {\n      const newBoard = copyBoard({\n        board\n      });\n      const nextRight = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n      return nextRight;\n    } else {\n      verify.left = false;\n    }\n  }\n\n  let result = {};\n\n  if (verify.right) {\n    result = {\n      right\n    };\n  }\n\n  if (verify.left) {\n    result = { ...result,\n      left\n    };\n  }\n\n  return result;\n}\n\nfunction checkBestOption({\n  board,\n  square\n}) {\n  const squareInfo = getSquareInfo({\n    board,\n    square\n  });\n\n  if (square.queen) {\n    const boardLight = showMovementLightQueen({\n      board,\n      squareInfo\n    });\n\n    if (!Array.isArray(boardLight)) {\n      return boardLight.newBoard;\n    }\n\n    return showMovementDark({\n      board: boardLight,\n      squareInfo\n    });\n  } else {\n    const movements = showMovementDark({\n      board,\n      squareInfo\n    });\n\n    if (movements) {\n      console.log(movements);\n    }\n  }\n}\n\nexport function handleAlphaBeta({\n  board\n}) {\n  board.forEach(row => row.forEach(square => {\n    if (square && square.id && square.piece && square.piece.color && square.piece.color === pieceDarker) {\n      return checkBestOption({\n        board,\n        square\n      });\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/logic/ia.js"],"names":["pieceDarker","squareColorDarker","squareSelected","checkEatingDark","checkEatingLight","eatNormalPiece","eatQueenPiece","movePiece","diePiece","dieQueenPiece","getSquareInfo","board","square","indexSquare","forEach","row","sq","id","indexOf","index","piece","copyBoard","newBoard","JSON","parse","stringify","map","color","showMovementLightQueen","squareInfo","left","direction","nextLeft","next","right","nextRight","verify","result","showMovementDark","nextleft","nextright","checkBestOption","queen","boardLight","Array","isArray","movements","console","log","handleAlphaBeta"],"mappings":"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","sourcesContent":["import {\n  pieceDarker,\n  squareColorDarker,\n  squareSelected,\n  checkEatingDark,\n  checkEatingLight,\n} from './index';\nconst eatNormalPiece = 1;\nconst eatQueenPiece = 1.5;\nconst movePiece = 0;\nconst diePiece = -1;\nconst dieQueenPiece = -1.5;\n\n// voce pode comer uma peça?\n// voce vai morrer?\n// se não vai andar normal\n\n// array [{id: 1, soma: 0}, {id: 2, soma: 1.5}]\n\nfunction getSquareInfo({ board, square }) {\n  let indexSquare = null;\n\n  board.forEach((row) =>\n    row.forEach((sq) => {\n      if (sq && sq.id && sq.id === square.id) {\n        indexSquare = {\n          row: board.indexOf(row),\n          index: row.indexOf(sq),\n          piece: sq.piece,\n          id: sq.id,\n        };\n      }\n    })\n  );\n\n  return indexSquare;\n}\n\nfunction copyBoard({ board }) {\n  const newBoard = JSON.parse(JSON.stringify(board)).map((row) => {\n    return row.map((sq) => {\n      if (sq.color === squareSelected) {\n        sq.color = squareColorDarker;\n      }\n      return sq;\n    });\n  });\n  return newBoard;\n}\n\nfunction showMovementLightQueen({ board, squareInfo }) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n  if (squareInfo.row === 0) {\n    return false;\n  }\n\n  if (squareInfo.index === 9) {\n    const left = board[squareInfo.row - 1][squareInfo.index - 1];\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return false;\n    }\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingLight({ board, square: left, direction: 'left' })) {\n        const newBoard = copyBoard({ board });\n        const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n        return { next: nextLeft };\n      } else {\n        return false;\n      }\n    }\n\n    return left;\n  }\n  // se for 0 só pode mover pra direita\n  if (squareInfo.index === 0) {\n    const right = board[squareInfo.row - 1][squareInfo.index + 1];\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return false;\n    }\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingLight({ board, square: right, direction: 'right' })) {\n        const newBoard = copyBoard({ board });\n        const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n        return { next: nextRight };\n      } else {\n        return false;\n      }\n    }\n\n    return right;\n  }\n  // pode mover para os dois lados\n  const verify = { left: true, right: true };\n\n  // left\n  const left = board[squareInfo.row - 1][squareInfo.index - 1];\n  if (left && left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n  if (left && left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingLight({ board, square: left, direction: 'left' })) {\n      const newBoard = copyBoard({ board });\n      const nextLeft = newBoard[squareInfo.row - 2][squareInfo.index - 2];\n      return { next: nextLeft };\n    } else {\n      verify.left = false;\n    }\n  }\n\n  // right\n  const right = board[squareInfo.row - 1][squareInfo.index + 1];\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingLight({ board, square: right, direction: 'right' })) {\n      const newBoard = copyBoard({ board });\n      const nextRight = newBoard[squareInfo.row - 2][squareInfo.index + 2];\n      return { next: nextRight };\n    } else {\n      verify.right = false;\n    }\n  }\n\n  let result = [];\n  if (verify.right) {\n    result = [right];\n  }\n  if (verify.left) {\n    result = [...result, left];\n  }\n\n  return result;\n}\n\n// ele pode retornar ou false ou o objeto\nfunction showMovementDark({ board, squareInfo }) {\n  // se ele tiver na posicao 0 ele nao anda mais e vira rainha\n  // se for 9 só pode mover pra esquerda\n\n  if (squareInfo.row === 9) {\n    return false;\n  }\n\n  if (squareInfo.index === 9) {\n    const right = board[squareInfo.row + 1][squareInfo.index - 1];\n    if (right && right.piece && right.piece.color === pieceDarker) {\n      return false;\n    }\n    if (right && right.piece && right.piece.color !== pieceDarker) {\n      if (checkEatingDark({ board, square: right, direction: 'right' })) {\n        const newBoard = copyBoard({ board });\n        const nextRight = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n        return nextRight;\n      } else {\n        return false;\n      }\n    }\n\n    return right;\n  }\n  // se for 0 só pode mover pra direita\n  if (squareInfo.index === 0) {\n    const left = board[squareInfo.row + 1][squareInfo.index + 1];\n    if (left && left.piece && left.piece.color === pieceDarker) {\n      return false;\n    }\n    if (left && left.piece && left.piece.color !== pieceDarker) {\n      if (checkEatingDark({ board, square: left, direction: 'left' })) {\n        const newBoard = copyBoard({ board });\n        const nextleft = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n        return nextleft;\n      } else {\n        return false;\n      }\n    }\n\n    return left;\n  }\n  // pode mover para os dois lados\n  const verify = { left: true, right: true };\n\n  // left\n  const right = board[squareInfo.row + 1][squareInfo.index - 1];\n  if (right && right.piece && right.piece.color === pieceDarker) {\n    verify.right = false;\n  }\n  if (right && right.piece && right.piece.color !== pieceDarker) {\n    if (checkEatingDark({ board, square: right, direction: 'right' })) {\n      const newBoard = copyBoard({ board });\n      const nextright = newBoard[squareInfo.row + 2][squareInfo.index - 2];\n      return nextright;\n    } else {\n      verify.right = false;\n    }\n  }\n\n  // right\n  const left = board[squareInfo.row + 1][squareInfo.index + 1];\n  if (left.piece && left.piece.color === pieceDarker) {\n    verify.left = false;\n  }\n  if (left.piece && left.piece.color !== pieceDarker) {\n    if (checkEatingDark({ board, square: left, direction: 'left' })) {\n      const newBoard = copyBoard({ board });\n      const nextRight = newBoard[squareInfo.row + 2][squareInfo.index + 2];\n      return nextRight;\n    } else {\n      verify.left = false;\n    }\n  }\n\n  let result = {};\n  if (verify.right) {\n    result = { right };\n  }\n  if (verify.left) {\n    result = { ...result, left };\n  }\n\n  return result;\n}\n\nfunction checkBestOption({ board, square }) {\n  const squareInfo = getSquareInfo({ board, square });\n  if (square.queen) {\n    const boardLight = showMovementLightQueen({ board, squareInfo });\n    if (!Array.isArray(boardLight)) {\n      return boardLight.newBoard;\n    }\n    return showMovementDark({ board: boardLight, squareInfo });\n  } else {\n    const movements = showMovementDark({ board, squareInfo });\n    if (movements) {\n      console.log(movements);\n    }\n  }\n}\n\nexport function handleAlphaBeta({ board }) {\n  board.forEach((row) =>\n    row.forEach((square) => {\n      if (\n        square &&\n        square.id &&\n        square.piece &&\n        square.piece.color &&\n        square.piece.color === pieceDarker\n      ) {\n        return checkBestOption({ board, square });\n      }\n    })\n  );\n}\n"]},"metadata":{},"sourceType":"module"}