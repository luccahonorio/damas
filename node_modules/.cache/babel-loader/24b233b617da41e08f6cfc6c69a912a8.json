{"ast":null,"code":"var _jsxFileName = \"/Users/henriqueolivoantonio/Desktop/Projects/damas/src/page/Dashboard/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FaCrown } from 'react-icons/fa';\nimport { handleAlphaBeta } from '../../logic/ia';\nimport { Container, Board, Square, Piece } from './styles';\nimport { showMovement, movePiece, squareSelected, pieceDarker, checkEatAgain } from '../../logic';\nimport { showMovementsAction, movePiecesAction } from '../../store/modules/board/actions';\nexport default function Page() {\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.board.board);\n  const [selected, setSelected] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [keepEat, setKeepEat] = useState(false);\n\n  function showMovements({\n    square\n  }) {\n    if (square.piece.color === pieceDarker) return;\n    if (turn === 'black') return;\n    dispatch(showMovementsAction({\n      board: showMovement({\n        board,\n        square\n      })\n    }));\n    setSelected(square);\n  }\n\n  function movePieces({\n    square,\n    selected\n  }) {\n    const newBoard = movePiece({\n      board,\n      square,\n      selected\n    });\n\n    if (newBoard) {\n      dispatch(movePiecesAction({\n        board: newBoard ? newBoard : board\n      }));\n      setSelected(null); // se o branco jogou mude para o turno do preto\n\n      if (selected.piece.color !== pieceDarker) {\n        if (!checkEatAgain({\n          board,\n          square\n        })) {\n          setTurn('black');\n        }\n      }\n\n      return newBoard;\n    }\n  }\n\n  function moveIA() {\n    const {\n      selected,\n      square,\n      sum\n    } = handleAlphaBeta({\n      board\n    });\n    square.color = squareSelected;\n    const newBoard = movePieces({\n      square,\n      selected: selected\n    }); // se ele n達o for comer n達o porque testar novamente\n\n    if (sum >= 1) {\n      const {\n        sum: sum1\n      } = handleAlphaBeta({\n        board: newBoard\n      });\n\n      if (sum1 >= 1) {\n        setKeepEat(true);\n      } else {\n        setTurn('white');\n      }\n    } else {\n      setTurn('white');\n    }\n  }\n\n  useEffect(() => {\n    if (!keepEat) return;\n    setTimeout(moveIA, 1000);\n    setKeepEat(false); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [board, keepEat]);\n  useEffect(() => {\n    if (turn === 'black') {\n      setTimeout(moveIA, 1000);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [turn]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, board.map(row => row.map(sq => /*#__PURE__*/React.createElement(Square, {\n    key: row.indexOf(sq),\n    color: sq.color,\n    onClick: () => movePieces({\n      square: sq,\n      selected\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, sq.piece && /*#__PURE__*/React.createElement(Piece, {\n    key: row.indexOf(sq),\n    color: sq.piece.color,\n    onClick: () => showMovements({\n      square: sq\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, sq.piece.queen && /*#__PURE__*/React.createElement(FaCrown, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 38\n    }\n  })))))));\n}","map":{"version":3,"sources":["/Users/henriqueolivoantonio/Desktop/Projects/damas/src/page/Dashboard/index.js"],"names":["React","useState","useEffect","useSelector","useDispatch","FaCrown","handleAlphaBeta","Container","Board","Square","Piece","showMovement","movePiece","squareSelected","pieceDarker","checkEatAgain","showMovementsAction","movePiecesAction","Page","dispatch","board","state","selected","setSelected","turn","setTurn","keepEat","setKeepEat","showMovements","square","piece","color","movePieces","newBoard","moveIA","sum","sum1","setTimeout","map","row","sq","indexOf","queen"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FaCrown } from 'react-icons/fa';\n\nimport { handleAlphaBeta } from '../../logic/ia';\nimport { Container, Board, Square, Piece } from './styles';\nimport {\n  showMovement,\n  movePiece,\n  squareSelected,\n  pieceDarker,\n  checkEatAgain,\n} from '../../logic';\nimport {\n  showMovementsAction,\n  movePiecesAction,\n} from '../../store/modules/board/actions';\n\nexport default function Page() {\n  const dispatch = useDispatch();\n  const board = useSelector((state) => state.board.board);\n  const [selected, setSelected] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [keepEat, setKeepEat] = useState(false);\n\n  function showMovements({ square }) {\n    if (square.piece.color === pieceDarker) return;\n    if (turn === 'black') return;\n\n    dispatch(showMovementsAction({ board: showMovement({ board, square }) }));\n    setSelected(square);\n  }\n\n  function movePieces({ square, selected }) {\n    const newBoard = movePiece({ board, square, selected });\n    if (newBoard) {\n      dispatch(movePiecesAction({ board: newBoard ? newBoard : board }));\n      setSelected(null);\n\n      // se o branco jogou mude para o turno do preto\n      if (selected.piece.color !== pieceDarker) {\n        if (!checkEatAgain({ board, square })) {\n          setTurn('black');\n        }\n      }\n\n      return newBoard;\n    }\n  }\n\n  function moveIA() {\n    const { selected, square, sum } = handleAlphaBeta({\n      board,\n    });\n\n    square.color = squareSelected;\n    const newBoard = movePieces({ square, selected: selected });\n\n    // se ele n達o for comer n達o porque testar novamente\n    if (sum >= 1) {\n      const { sum: sum1 } = handleAlphaBeta({\n        board: newBoard,\n      });\n      if (sum1 >= 1) {\n        setKeepEat(true);\n      } else {\n        setTurn('white');\n      }\n    } else {\n      setTurn('white');\n    }\n  }\n\n  useEffect(() => {\n    if (!keepEat) return;\n\n    setTimeout(moveIA, 1000);\n    setKeepEat(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [board, keepEat]);\n\n  useEffect(() => {\n    if (turn === 'black') {\n      setTimeout(moveIA, 1000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [turn]);\n\n  return (\n    <Container>\n      <Board>\n        {board.map((row) =>\n          row.map((sq) => (\n            <Square\n              key={row.indexOf(sq)}\n              color={sq.color}\n              onClick={() => movePieces({ square: sq, selected })}\n            >\n              {sq.piece && (\n                <Piece\n                  key={row.indexOf(sq)}\n                  color={sq.piece.color}\n                  onClick={() => showMovements({ square: sq })}\n                >\n                  {sq.piece.queen && <FaCrown size={20} />}\n                </Piece>\n              )}\n            </Square>\n          ))\n        )}\n      </Board>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}